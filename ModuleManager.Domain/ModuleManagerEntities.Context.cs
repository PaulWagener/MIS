//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModuleManager.Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DomainEntities : DbContext
    {
        public DomainEntities()
            : base("name=DomainEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Competentie> Competenties { get; set; }
        public virtual DbSet<FaseType> FaseTypes { get; set; }
        public virtual DbSet<Leerlijn> Leerlijnen { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleCompetentie> ModuleCompetenties { get; set; }
        public virtual DbSet<Niveau> Niveaux { get; set; }
        public virtual DbSet<Onderdeel> Onderdeels { get; set; }
        public virtual DbSet<Opleiding> Opleidings { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<StudieBelasting> StudieBelastings { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<Toetsvorm> Toetsvorms { get; set; }
        public virtual DbSet<Weekplanning> Weekplannings { get; set; }
        public virtual DbSet<Werkvorm> Werkvormen { get; set; }
        public virtual DbSet<Fase> Fases { get; set; }
        public virtual DbSet<Docent> Docenten { get; set; }
        public virtual DbSet<Beoordeling> Beoordelingen { get; set; }
        public virtual DbSet<Leerdoel> Leerdoelen { get; set; }
        public virtual DbSet<Leermiddel> Leermiddelen { get; set; }
        public virtual DbSet<Icon> Icons { get; set; }
        public virtual DbSet<ModuleWerkvorm> ModuleWerkvormen { get; set; }
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<SysteemRol> SysteemRol { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Schooljaar> Schooljaren { get; set; }
        public virtual DbSet<StudiePunt> StudiePunten { get; set; }
        public virtual DbSet<Blok> Bloks { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spAuthenticateUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spAuthenticateUser", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spEditUser(string oldUserNaam, string newUserNaam, string systeemRol, string email, string naam, Nullable<bool> blocked)
        {
            var oldUserNaamParameter = oldUserNaam != null ?
                new ObjectParameter("OldUserNaam", oldUserNaam) :
                new ObjectParameter("OldUserNaam", typeof(string));
    
            var newUserNaamParameter = newUserNaam != null ?
                new ObjectParameter("NewUserNaam", newUserNaam) :
                new ObjectParameter("NewUserNaam", typeof(string));
    
            var systeemRolParameter = systeemRol != null ?
                new ObjectParameter("SysteemRol", systeemRol) :
                new ObjectParameter("SysteemRol", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var naamParameter = naam != null ?
                new ObjectParameter("naam", naam) :
                new ObjectParameter("naam", typeof(string));
    
            var blockedParameter = blocked.HasValue ?
                new ObjectParameter("Blocked", blocked) :
                new ObjectParameter("Blocked", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spEditUser", oldUserNaamParameter, newUserNaamParameter, systeemRolParameter, emailParameter, naamParameter, blockedParameter);
        }
    
        public virtual ObjectResult<string> spGetRol(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetRol", userNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRegisterUser(string userNaam, string systeemRol, string email, string naam)
        {
            var userNaamParameter = userNaam != null ?
                new ObjectParameter("UserNaam", userNaam) :
                new ObjectParameter("UserNaam", typeof(string));
    
            var systeemRolParameter = systeemRol != null ?
                new ObjectParameter("SysteemRol", systeemRol) :
                new ObjectParameter("SysteemRol", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var naamParameter = naam != null ?
                new ObjectParameter("naam", naam) :
                new ObjectParameter("naam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRegisterUser", userNaamParameter, systeemRolParameter, emailParameter, naamParameter);
        }
    
        public virtual int spArchiveCohort(Nullable<int> schooljaar)
        {
            var schooljaarParameter = schooljaar.HasValue ?
                new ObjectParameter("schooljaar", schooljaar) :
                new ObjectParameter("schooljaar", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spArchiveCohort", schooljaarParameter);
        }
    
        public virtual int sp_CopyCohort(Nullable<int> schooljaarFrom, Nullable<int> schooljaarTo)
        {
            var schooljaarFromParameter = schooljaarFrom.HasValue ?
                new ObjectParameter("schooljaarFrom", schooljaarFrom) :
                new ObjectParameter("schooljaarFrom", typeof(int));
    
            var schooljaarToParameter = schooljaarTo.HasValue ?
                new ObjectParameter("schooljaarTo", schooljaarTo) :
                new ObjectParameter("schooljaarTo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CopyCohort", schooljaarFromParameter, schooljaarToParameter);
        }
    }
}
